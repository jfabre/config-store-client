#!/usr/bin/env ruby

require 'commander/import'
dir_name = File.expand_path("..", File.dirname(__FILE__))
require "#{dir_name}/lib/config_store"

program :version, ConfigStore::Version
program :description, "Loads environment variables from a remote server for easy and secure sharing/switching of project configuration."
program :help_formatter, :compact
default_command :show

$log = false
global_option('-l', '--log', 'Outputs the log of http queries sent to the server') { $log = true }
def activate_logs
  require 'logger'
  ActiveResource::Base.logger = Logger.new(STDOUT)
end
def init
  ConfigStore.validate_file
  activate_logs if $log
end
command :show do |c|
  c.syntax = 'config-store show'
  c.summary = 'Displays all the variables for the current store.'
  c.action do |args, options|
    init
    ConfigStore.show
  end
end

command :export do |c|
  c.syntax = 'config-store export'
  c.summary = 'Outputs the all the exports needed for all the env variables in the store.'
  c.action do |args, options|
    init
    ConfigStore.export
  end
end

command :setup do |c| 
  c.syntax = 'config-store setup [options]'
  c.summary = 'Creates or mofify your current .config-store file to setup the org/store your project is related to.'
  c.example 'Configures the site, org and store to use within this directory', 'config-store setup site=https://www.mysite.com/endpoint org=myorg store=mystore'
  c.action do |args, options|
    hash = arg_hash(args)    
    ConfigStore.setup(hash[:org], hash[:store], hash[:site])
  end
end

command :add do |c|
  c.syntax = 'config-store add key=value'
  c.summary = 'Adds key-value pair(s) to your store.'
  c.example 'Adds two new pairs to your store', 'config-store add key=value key2=value2'
  c.action do |args, options|
    init 
    hash = arg_hash(args)
    ConfigStore.add hash
  end
end

command :delete do |c|
  c.syntax = 'config-store delete key1 key2 key3'
  c.summary = 'Deletes keys within your store'
  c.example 'keys names foo and bar will be removed', 'config-store delete foo bar'
  c.action do |args, options|
    activate_logs if $log
    ConfigStore.delete args
  end
end

def arg_hash(args)
  hash = {}
  args.each do |a|
    key_value = a.split('=')
    hash[key_value[0].to_sym] = key_value[1]
  end
  hash
end

